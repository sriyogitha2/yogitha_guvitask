#1 Create a Python Class called Circle with Constructor which will take a List as an argument for the task. The List is [10, 501, 22, 37, 100, 999, 87, 351]

# Import the math module to use math.pi and other mathematical functions
import math
# Define a class named Circle
class Circle:
# Initialize the class with the radii attribute (this should be __init__)
    def _init_(self, radii):
# Assign the given radii to the instance variable self.radii
        self.radii = radii  
# Define the method to calculate the area of circles
    def area(self):
# Iterate through each radius in the list self.radii
        for radius in self.radii: 
# Calculate the area using the formula: area = π * radius²
            area = math.pi * (radius ** 2)
# Print the calculated area with two decimal places
            print(f"Area of circle with radius {radius}: {area:.2f}")
# Define the method to calculate the perimeter of circles
    def perimeter(self):
# Iterate through each radius in the list self.radii
        for radius in self.radii:
# Calculate the perimeter using the formula: perimeter = 2 * π * radius
            perimeter = 2 * math.pi * radius
# Print the calculated perimeter with two decimal places
            print(f"Perimeter of circle with radius {radius}: {perimeter:.2f}")

radii_list = [10, 501, 22, 37, 100, 999, 87, 351]
# Create an object of the Circle class with the given radii_list
circleobj = Circle(radii_list)
# Call the area method on the circleobj to print the areas of the circles
circleobj.area()
# Call the perimeter method on the circleobj to print the perimeters of the circles
circleobj.perimeter()

#2 Create proper member variables inside the task if required and use them when
necessary. For example for this task create a class private variable named pi = 3.141

# Define a class named rec (for rectangle)
class rec():
# Define the constructor method to initialize length and width
    def __init__ (self,length,width):
# Assign the length value to the instance variable self.length
     self.length=length
# Assign the width value to the instance variable self.width
     self.width=width
# Define the area method to calculate the area of the rectangle
    def area(self):
# Calculate the area of the rectangle (length * width)
     a=self.length*self.width
# Print the calculated area
     print(a)
# Define the perimeter method to calculate the perimeter of the rectangle
    def perimeter(self):
# Calculate the perimeter of the rectangle (2 * (length + width))
     peri=(2*(self.length+self.width))
# Print the calculated perimeter
     print(peri)
# Define a class named circle (for circle)
class circle():
# Define the constant pi for use in area and perimeter calculations
    pi=3.141
# Define the constructor method to initialize radius
    def __init__(self,radius):
# Assign the radius value to the instance variable self.radius 
        self.radius=radius
# Define the area method to calculate the area of the circle
    def area(self):
# Calculate the area of the circle (π * radius²)
        ar=pi*(self.radius**2)
# Print the calculated area
        print(ar)
# Define the perimeter method to calculate the perimeter of the circle
    def perimeter(self):
# Calculate the perimeter (circumference) of the circle (2 * π * radius)
        p=2*pi*self.radius
# Print the calculated perimeter
        print(p)
# Get the length value from user input
l=int(input("enter the value of length:"))
# Get the width value from user input
w=int(input("enter the value of width:"))
# Get the radius value from user input
r=int(input("enter the value of radius:"))
# Create an object of the rec class with the given length and width
obj1=rec(l,w)
# Create an object of the circle class with the given radius
obj2=circle(r)
# Call the area method on obj1 to print the area of the rectangle
obj1.area()
# Call the perimeter method on obj1 to print the perimeter of the rectangle
obj1.perimeter()


#3  From the given List create two class Methods Area and Perimeter which will be going to calculate the Area and Perimeter.

# Import the math module to use math.pi for calculations
import math
# Define a class named rec for representing rectangles
class rec():
# Define the constructor method to initialize length and width
    def __init__ (self,length,width):
# Assign the input length to the instance variable self.length
     self.length=length
# Assign the input width to the instance variable self.width
     self.width=width
# Define the area method to calculate the area of the rectangle
    def area(self):
# Calculate the area using the formula: area = length * width
     a=self.length*self.width
# Print the calculated area
     print(a)
# Define the perimeter method to calculate the perimeter of the rectangle
    def perimeter(self):
# Calculate the perimeter using the formula: perimeter = 2 * (length + width)
     peri=(2*(self.length+self.width))
# Print the calculated perimeter
     print(peri)
# Define a class named circle for representing circles
class circle():
# Define the constructor method to initialize radius
    def __init__(self,radius): 
# Assign the input radius to the instance variable self.radius
        self.radius=radius
# Define the area method to calculate the area of the circle
    def area(self):
# Calculate the area using the formula: area = π * radius²
        ar=math.pi*(self.radius**2)
# Print the calculated area
        print(ar)
# Define the perimeter method to calculate the perimeter (circumference) of the circle
    def perimeter(self):
# Calculate the perimeter using the formula: perimeter = 2 * π * radius
        p=2*math.pi*self.radius
# Print the calculated perimeter
        print(p)
# Get the length value from user input
l=int(input("enter the value of length:"))
# Get the width value from user input
w=int(input("enter the value of width:"))
# Get the radius value from user input
r=int(input("enter the value of radius:"))
# Create an object of the rec class with the given length and width
obj1=rec(l,w)
# Create an object of the circle class with the given radius
obj2=circle(r)
# Call the area method on obj1 to print the area
obj1.area()
# Call the perimeter method on obj1 to print the perimeter
obj1.perimeter()


#4  Kindly visit the below URL and convert the UML diagram into a Python Class and its methods. https://github.com/rvsp/typescript-oops/blob/master/Practice/TV-class.md 

import math
# Base class TV
class TV:
    def _init_(self, brand):
        """
        Constructor to initialize TV properties like brand, channel, volume, and status.
        """
        self.brand = brand
        self.channel = 1
        self.volume = 50
        self.status = "OFF"

    def increase_volume(self):
        """Increase the volume by 1, ensuring it stays between 0 and 100."""
        if self.volume < 100:
            self.volume += 1
        else:
            print("Volume can't be increased beyond 100.")

    def decrease_volume(self):
        """Decrease the volume by 1, ensuring it stays between 0 and 100."""
        if self.volume > 0:
            self.volume -= 1
        else:
            print("Volume can't be decreased below 0.")

    def set_channel(self, channel):
        """Set the channel, ensuring it's between 1 and 50."""
        if 1 <= channel <= 50:
            self.channel = channel
        else:
            print(f"Invalid channel. The channel should be between 1 and 50. Staying at channel {self.channel}.")

    def reset_tv(self):
        """Reset TV to default settings (channel 1, volume 50)."""
        self.channel = 1
        self.volume = 50
        print("TV has been reset to default settings: channel 1, volume 50.")

    def get_status(self):
        """Return the current status of the TV."""
        return f"{self.brand} at channel {self.channel}, volume {self.volume}, status {self.status}"

# Subclass for LED TV
class LedTV(TV):
    def _init_(self, brand, screen_thickness, energy_usage, lifespan, refresh_rate):
        super()._init_(brand)  # Call parent class constructor
        self.screen_thickness = screen_thickness
        self.energy_usage = energy_usage
        self.lifespan = lifespan
        self.refresh_rate = refresh_rate

    def viewing_angle(self):
        """Return the viewing angle of the LED TV."""
        return f"The viewing angle of {self.brand} LED TV is 178°."

    def backlight(self):
        """Return backlight functionality of the LED TV."""
        return f"The {self.brand} LED TV has backlight control."

    def display_details(self):
        """Display detailed features of the LED TV."""
        return (f"{self.brand} LED TV Details:\n"
                f"Screen Thickness: {self.screen_thickness}mm\n"
                f"Energy Usage: {self.energy_usage}W\n"
                f"Lifespan: {self.lifespan} years\n"
                f"Refresh Rate: {self.refresh_rate}Hz\n"
                f"Viewing Angle: {self.viewing_angle()}\n"
                f"Backlight: {self.backlight()}")

# Subclass for Plasma TV
class PlasmaTV(TV):
    def _init_(self, brand, screen_thickness, energy_usage, lifespan, refresh_rate):
        super()._init_(brand)  # Call parent class constructor
        self.screen_thickness = screen_thickness
        self.energy_usage = energy_usage
        self.lifespan = lifespan
        self.refresh_rate = refresh_rate

    def viewing_angle(self):
        """Return the viewing angle of the Plasma TV."""
        return f"The viewing angle of {self.brand} Plasma TV is 160°."

    def backlight(self):
        """Return backlight functionality of the Plasma TV."""
        return f"The {self.brand} Plasma TV has no backlight."

    def display_details(self):
        """Display detailed features of the Plasma TV."""
        return (f"{self.brand} Plasma TV Details:\n"
                f"Screen Thickness: {self.screen_thickness}mm\n"
                f"Energy Usage: {self.energy_usage}W\n"
                f"Lifespan: {self.lifespan} years\n"
                f"Refresh Rate: {self.refresh_rate}Hz\n"
                f"Viewing Angle: {self.viewing_angle()}\n"
                f"Backlight: {self.backlight()}")

# Example Usage

# Creating instances of LED and Plasma TV
led_tv = LedTV("Samsung", 30, 80, 10, 120)
plasma_tv = PlasmaTV("LG", 60, 150, 12, 60)

# Displaying details of the LED TV
print(led_tv.display_details())
print("\n")

# Displaying details of the Plasma TV
print(plasma_tv.display_details())

# Test TV Methods
tv1 = TV("Panasonic")
tv1.increase_volume()
tv1.set_channel(8)
print(tv1.get_status())
tv1.reset_tv()
print(tv1.get_status())



